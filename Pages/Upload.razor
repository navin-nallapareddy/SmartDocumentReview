@page "/upload"
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment Env
@inject NavigationManager Nav

<h3>Upload a PDF</h3>

<EditForm OnValidSubmit="HandleSubmit">
    <div class="mb-3">
        <InputFile OnChange="OnInputFileChange" accept=".pdf,application/pdf" />
        @if (!string.IsNullOrWhiteSpace(Error))
        {
            <div class="text-danger mt-2">@Error</div>
        }
    </div>

    <div class="mb-3">
        <button class="btn btn-primary" disabled="@(!CanSubmit)">
            @if (IsBusy)
            {
                <span>Processing…</span>
            }
            else
            {
                <span>Upload</span>
            }
        </button>
    </div>
</EditForm>

@if (IsBusy)
{
    @* Lightweight overlay to avoid “greyed out forever” issues when exceptions occur *@
    <div style="
        position:fixed; inset:0;
        background:rgba(0,0,0,.15);
        z-index:9999; display:flex; align-items:center; justify-content:center;">
        <div class="bg-white p-3 rounded shadow">Working…</div>
    </div>
}

@code {
    IBrowserFile? UploadedFile;
    bool IsBusy;
    string? SavedFileName;
    string? Error;

    bool CanSubmit => UploadedFile is not null && !IsBusy;

    void OnInputFileChange(InputFileChangeEventArgs e)
    {
        Error = null;
        UploadedFile = e.File;
        if (UploadedFile is null)
        {
            Error = "Please choose a PDF file.";
            return;
        }

        // Basic content/type guard
        var isPdf = string.Equals(UploadedFile.ContentType, "application/pdf", StringComparison.OrdinalIgnoreCase)
                    || Path.GetExtension(UploadedFile.Name).Equals(".pdf", StringComparison.OrdinalIgnoreCase);

        if (!isPdf)
        {
            Error = "Only PDF files are supported.";
            UploadedFile = null;
        }
    }

    async Task HandleSubmit()
    {
        if (UploadedFile is null)
        {
            Error = "Please choose a PDF file.";
            return;
        }

        IsBusy = true;
        try
        {
            // Ensure uploads directory exists under wwwroot
            var webRoot = Env.WebRootPath ?? Path.Combine(AppContext.BaseDirectory, "wwwroot");
            var uploadsDir = Path.Combine(webRoot, "uploads");
            Directory.CreateDirectory(uploadsDir);

            // Sanitize filename and avoid collisions
            var safeName = Path.GetFileName(UploadedFile.Name); // strips any path components
            var baseName = Path.GetFileNameWithoutExtension(safeName);
            var ext = Path.GetExtension(safeName);
            var timestamp = DateTime.UtcNow.ToString("yyyyMMdd_HHmmssfff");
            var finalName = $"{baseName}_{timestamp}{ext}";
            var fullPath = Path.Combine(uploadsDir, finalName);

            // Save the PDF
            await using (var fs = File.Create(fullPath))
            {
                await UploadedFile.OpenReadStream(long.MaxValue).CopyToAsync(fs);
            }

            SavedFileName = finalName;

            // Navigate to the viewer page we built earlier
            // This aligns with PDFResult.razor’s route: /result/{FileName}
            Nav.NavigateTo($"/result/{Uri.EscapeDataString(SavedFileName)}");
        }
        catch (Exception ex)
        {
            Error = $"Upload failed: {ex.Message}";
        }
        finally
        {
            // Crucial: Always clear IsBusy so an overlay never “greys out” the frame permanently
            IsBusy = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
