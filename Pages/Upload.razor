@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using SmartDocumentReview.Services
@using SmartDocumentReview.Models
@using SmartDocumentReview.Data
@inject AuthService AuthService
@inject PdfKeywordTagger Tagger
@inject TagDbContext Db

<h3 class="mb-4 text-center">Smart Document Review</h3>

<div class="card shadow-sm mx-auto" style="max-width:600px;">
    <div class="card-body">
        <p class="fw-semibold">Welcome, @AuthService.CurrentUser!</p>

        <EditForm Model="this" OnValidSubmit="HandleValidSubmit">
            <InputFile class="form-control" OnChange="HandleFileSelected" accept=".pdf" />
            <div class="mt-3">
                <label class="form-label">Enter up to 5 keywords (one per line):</label>
                <InputTextArea class="form-control" @bind-Value="RawKeywordInput" Rows="6" />
            </div>
            <button type="submit" class="btn btn-primary mt-3" disabled="@IsProcessing">Process</button>
        </EditForm>

        @if (ErrorMessage != null)
        {
            <div class="alert alert-danger mt-3">@ErrorMessage</div>
        }

        @if (IsProcessing)
        {
            <p class="mt-3">Processing...</p>
        }

        @if (MatchedKeywords?.Any() == true)
        {
            <h4 class="mt-4">Matches Found:</h4>
            <ul class="list-group">
                @foreach (var match in MatchedKeywords)
                {
                    <li class="list-group-item">
                        <strong>@match.SectionTitle:</strong><br />
                        <em>@match.MatchedText</em><br />
                        <small class="text-muted">Keyword: <code>@match.Keyword</code></small>
                    </li>
                }
            </ul>
        }
    </div>
</div>

@code {
    private IBrowserFile? uploadedFile;
    public string RawKeywordInput { get; set; } = string.Empty;
    public bool IsProcessing { get; set; } = false;
    public string? ErrorMessage { get; set; }

    public List<TagMatch> MatchedKeywords { get; set; } = new();

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        ErrorMessage = null;
        MatchedKeywords.Clear();

        if (uploadedFile == null)
        {
            ErrorMessage = "Please upload a PDF file.";
            return;
        }

        var keywords = RawKeywordInput
            .Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries)
            .Select(k => k.Trim())
            .Where(k => !string.IsNullOrWhiteSpace(k))
            .Distinct()
            .Take(5)
            .ToList();

        if (!keywords.Any())
        {
            ErrorMessage = "Enter at least one keyword.";
            return;
        }

        IsProcessing = true;

        try
        {
            using var readStream = uploadedFile.OpenReadStream(20 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await readStream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            MatchedKeywords = Tagger.ProcessPdf(memoryStream, keywords, AuthService.CurrentUser);

            var document = new Document
            {
                FileName = uploadedFile.Name,
                UploadedBy = AuthService.CurrentUser,
                UploadedAt = DateTime.UtcNow
            };
            Db.Documents.Add(document);
            await Db.SaveChangesAsync();

            foreach (var match in MatchedKeywords)
            {
                match.DocumentId = document.Id;
            }

            Db.TagMatches.AddRange(MatchedKeywords);
            await Db.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error processing PDF: " + ex.Message;
        }

        IsProcessing = false;
    }
}