@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using SmartDocumentReview.Services
@using SmartDocumentReview.Models
@using SmartDocumentReview.Data
@using System.IO
@using System.Text.RegularExpressions
@inject AuthService AuthService
@inject PdfKeywordTagger Tagger
@inject TagDbContext Db
@inject IJSRuntime JS

<div class="min-h-screen p-6">
    <h3 class="text-2xl font-semibold text-center mb-6">Smart Document Review</h3>
    <div class="max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Left column: Upload form and results -->
        <div class="space-y-6">
            <div class="bg-white shadow rounded-lg p-6">
                <p class="font-medium mb-4">Welcome, @AuthService.CurrentUser!</p>

                <EditForm Model="this" OnValidSubmit="HandleValidSubmit">
                    <InputFile class="w-full px-3 py-2 border border-gray-300 rounded-lg" OnChange="HandleFileSelected" accept=".pdf" />
                    <div class="mt-4">
                        <label class="block mb-2 text-sm font-medium text-gray-700">Enter up to 5 keywords (one per line):</label>
                        <InputTextArea class="w-full px-3 py-2 border border-gray-300 rounded-lg" @bind-Value="RawKeywordInput" Rows="6" />
                    </div>
                    <button type="submit" class="mt-4 bg-blue-600 hover:bg-blue-700 text-white font-medium px-4 py-2 rounded-lg disabled:opacity-50" disabled="@IsProcessing">Process</button>
                </EditForm>

                @if (ErrorMessage != null)
                {
                    <div class="mt-4 text-red-600">@ErrorMessage</div>
                }

                @if (IsProcessing)
                {
                    <p class="mt-4">Processing... @ElapsedTime</p>
                }
            </div>

            @if (MatchedKeywords.Any())
            {
                <div class="bg-white shadow rounded-lg p-6 overflow-y-auto max-h-[60vh]">
                    @foreach (var match in MatchedKeywords)
                    {
                        <div class="mb-6">
                            <h4 @onclick="() => LoadPdf(match.PageNumber, match.Keyword)" class="cursor-pointer text-blue-600 hover:underline">
                                @match.SectionTitle
                            </h4>
                            <p>@(HighlightKeyword(match.MatchedText, match.Keyword))</p>
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Right column: Summary/PDF viewer -->
        <div class="flex flex-col">
            @if (MatchedKeywords.Any())
            {
                <div class="bg-white shadow rounded-lg h-full p-4 overflow-y-auto">
                    <iframe id="pdfViewer" class="w-full h-full" frameborder="0"></iframe>
                </div>
            }
            else
            {
                <div class="bg-white shadow rounded-lg h-full p-6 flex items-center justify-center text-gray-500">
                    <p>Summary will appear here after processing.</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IBrowserFile? uploadedFile;
    public string RawKeywordInput { get; set; } = string.Empty;
    public bool IsProcessing { get; set; } = false;
    public string? ErrorMessage { get; set; }
    public string ElapsedTime { get; set; } = "00:00";

    public List<TagMatch> MatchedKeywords { get; set; } = new();
    private readonly string[] HighlightPalette = new[] { "#ffff00", "#ffb6c1", "#90ee90", "#add8e6", "#ffa07a" };
    private Dictionary<string, string> keywordColors = new();

    private readonly System.Diagnostics.Stopwatch _stopwatch = new();
    private System.Timers.Timer? _timer;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        ErrorMessage = null;
        MatchedKeywords.Clear();

        if (uploadedFile == null)
        {
            ErrorMessage = "Please upload a PDF file.";
            return;
        }

        var keywords = RawKeywordInput
            .Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries)
            .Select(k => k.Trim())
            .Where(k => !string.IsNullOrWhiteSpace(k))
            .Distinct()
            .Take(5)
            .ToList();

        keywordColors = keywords
            .Select((k, i) => new { k, i })
            .ToDictionary(x => x.k, x => HighlightPalette[x.i % HighlightPalette.Length]);

        if (!keywords.Any())
        {
            ErrorMessage = "Enter at least one keyword.";
            return;
        }

        IsProcessing = true;
        _stopwatch.Restart();
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += (s, e) =>
        {
            ElapsedTime = _stopwatch.Elapsed.ToString(@"mm\:ss");
            InvokeAsync(StateHasChanged);
        };
        _timer.Start();

        try
        {
            using var readStream = uploadedFile.OpenReadStream(20 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await readStream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            MatchedKeywords = Tagger.ProcessPdf(memoryStream, keywords, AuthService.CurrentUser);

            // Save uploaded file for PDF viewer
            memoryStream.Position = 0;
            var uploadsDir = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads");
            Directory.CreateDirectory(uploadsDir);
            var savedFilePath = Path.Combine(uploadsDir, "latest.pdf");
            await using (var fs = File.Create(savedFilePath))
            {
                await memoryStream.CopyToAsync(fs);
            }

            var document = new Document
            {
                FileName = uploadedFile.Name,
                FilePath = "/uploads/latest.pdf",
                CreatedBy = AuthService.CurrentUser,
                CreatedAt = DateTime.UtcNow
            };
            Db.Documents.Add(document);
            await Db.SaveChangesAsync();

            foreach (var match in MatchedKeywords)
            {
                match.DocumentId = document.Id;
            }

            Db.TagMatches.AddRange(MatchedKeywords);
            await Db.SaveChangesAsync();

            if (MatchedKeywords.Count > 0)
            {
                LoadPdf(MatchedKeywords[0].PageNumber, MatchedKeywords[0].Keyword);
            }
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            ErrorMessage = "Error processing PDF: " + message;
        }
        finally
        {
            IsProcessing = false;
            _timer?.Stop();
            StateHasChanged();
        }
    }

    void LoadPdf(int page, string keyword)
    {
        var file = "/uploads/latest.pdf";
        var color = keywordColors.ContainsKey(keyword) ? keywordColors[keyword] : "yellow";
        var viewerUrl = $"/pdfjs/index.html?file={file}&page={page}&highlight={Uri.EscapeDataString(keyword)}&color={Uri.EscapeDataString(color)}";
        JS.InvokeVoidAsync("setIframeSrc", "pdfViewer", viewerUrl);
    }

    MarkupString HighlightKeyword(string text, string keyword)
    {
        if (string.IsNullOrWhiteSpace(keyword)) return (MarkupString)text;
        var color = keywordColors.ContainsKey(keyword) ? keywordColors[keyword] : "yellow";
        var regex = new Regex(Regex.Escape(keyword), RegexOptions.IgnoreCase);
        var highlighted = regex.Replace(text, m => $"<mark style=\"background-color: {color};\">{m.Value}</mark>");
        return (MarkupString)highlighted;
    }
}