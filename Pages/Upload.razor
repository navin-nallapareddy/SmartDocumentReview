@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using SmartDocumentReview.Services
@using SmartDocumentReview.Models
@using SmartDocumentReview.Data
@using System.IO
@using System.Text.RegularExpressions
@using System.Linq
@inject AuthService AuthService
@inject PdfKeywordTagger Tagger
@inject TagDbContext Db
@inject IJSRuntime JS

<h3 class="mb-4 text-center">Smart Document Review</h3>

<div class="card shadow-sm mx-auto" style="width: 90%;">
    <div class="card-body">
        <!-- Left-aligned welcome -->
        <p class="fw-semibold mb-4 text-start">Welcome, @AuthService.CurrentUser!</p>

        <EditForm Model="this" OnValidSubmit="HandleValidSubmit">
            <div class="row justify-content-center g-3 text-center">
                <!-- Upload File -->
<div class="col-auto d-flex align-items-center gap-5">
    <label class="form-label fw-semibold mb-0">Upload PDF:</label>
    <InputFile class="form-control" OnChange="HandleFileSelected" accept=".pdf" />
</div>

                <!-- Keywords -->
                <div class="col-auto d-flex flex-column align-items-center">
                    <label class="form-label fw-semibold">Enter keywords (one per line):</label>
                    <InputTextArea class="form-control" style="width: 250px;" @bind-Value="RawKeywordInput" Rows="3" />
                </div>

                <!-- Process Button + Spinner -->
                <div class="col-auto d-flex flex-column align-items-center">
                    <label class="form-label invisible">Action</label>
                    <div class="d-flex align-items-center gap-2">
                        <button type="submit" class="btn btn-primary" disabled="@IsProcessing">Process</button>
                        @if (IsProcessing)
                        {
                            <div class="spinner-border text-primary" style="width: 1.25rem; height: 1.25rem;" role="status">
                                <span class="visually-hidden">Processing...</span>
                            </div>
                        }
                    </div>
                    @if (IsProcessing)
                    {
                        <p class="mt-2 small">Processing... @ElapsedTime</p>
                    }
                </div>
            </div>
        </EditForm>

        @if (ErrorMessage != null)
        {
            <div class="alert alert-danger mt-3">@ErrorMessage</div>
        }
    </div>
</div>





@if (MatchedKeywords.Any())
{
    <div class="mt-4" style="display: flex; height: 90vh;">
        <!-- Left: Match Results -->
        <div style="width: 40%; overflow-y: auto; padding: 1rem;">
            @foreach (var match in MatchedKeywords)
            {
                <div style="margin-bottom: 1.5rem;">
                    <h4 @onclick="() => LoadPdf(match.PageNumber)"
                        style="cursor: pointer; color: blue; text-decoration: underline;">
                        @match.SectionTitle
                    </h4>
                    <p>@(HighlightKeywords(match.MatchedText))</p>
                </div>
            }
        </div>

        <!-- Right: PDF Viewer -->
        <div style="width: 60%; height: 100%;">
            <iframe id="pdfViewer" width="100%" height="100%" frameborder="0"></iframe>
        </div>
    </div>
}

@code {
    private IBrowserFile? uploadedFile;
    public string RawKeywordInput { get; set; } = string.Empty;
    public bool IsProcessing { get; set; } = false;
    public string? ErrorMessage { get; set; }
    public string ElapsedTime { get; set; } = "00:00";

    public List<TagMatch> MatchedKeywords { get; set; } = new();
    private readonly string[] HighlightPalette = new[] { "#ffff00", "#ffb6c1", "#90ee90", "#add8e6", "#ffa07a" };
    private Dictionary<string, string> keywordColors = new();

    private readonly System.Diagnostics.Stopwatch _stopwatch = new();
    private System.Timers.Timer? _timer;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        ErrorMessage = null;
        MatchedKeywords.Clear();

        if (uploadedFile == null)
        {
            ErrorMessage = "Please upload a PDF file.";
            return;
        }

        var keywords = RawKeywordInput
            .Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries)
            .Select(k => k.Trim())
            .Where(k => !string.IsNullOrWhiteSpace(k))
            .Distinct()
            .Take(5)
            .ToList();

        keywordColors = keywords
            .Select((k, i) => new { k, i })
            .ToDictionary(x => x.k, x => HighlightPalette[x.i % HighlightPalette.Length]);

        if (!keywords.Any())
        {
            ErrorMessage = "Enter at least one keyword.";
            return;
        }

        IsProcessing = true;
        _stopwatch.Restart();
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += (s, e) =>
        {
            ElapsedTime = _stopwatch.Elapsed.ToString(@"mm\:ss");
            InvokeAsync(StateHasChanged);
        };
        _timer.Start();

        try
        {
            using var readStream = uploadedFile.OpenReadStream(20 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await readStream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            MatchedKeywords = Tagger.ProcessPdf(memoryStream, keywords, AuthService.CurrentUser);

            // Save uploaded file for PDF viewer
            memoryStream.Position = 0;
            var uploadsDir = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads");
            Directory.CreateDirectory(uploadsDir);
            var savedFilePath = Path.Combine(uploadsDir, "latest.pdf");
            await using (var fs = File.Create(savedFilePath))
            {
                await memoryStream.CopyToAsync(fs);
            }

            var document = new Document
            {
                FileName = uploadedFile.Name,
                FilePath = "/uploads/latest.pdf",
                CreatedBy = AuthService.CurrentUser,
                CreatedAt = DateTime.UtcNow
            };
            Db.Documents.Add(document);
            await Db.SaveChangesAsync();

            foreach (var match in MatchedKeywords)
            {
                match.DocumentId = document.Id;
            }

            Db.TagMatches.AddRange(MatchedKeywords);
            await Db.SaveChangesAsync();

            if (MatchedKeywords.Count > 0)
            {
                LoadPdf(MatchedKeywords[0].PageNumber);
            }
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            ErrorMessage = "Error processing PDF: " + message;
        }
        finally
        {
            IsProcessing = false;
            _timer?.Stop();
            StateHasChanged();
        }
    }

    void LoadPdf(int page)
    {
        var file = "/uploads/latest.pdf";
        var highlightParams = string.Join("&", keywordColors.Select(kvp => $"highlight={Uri.EscapeDataString(kvp.Key)}&color={Uri.EscapeDataString(kvp.Value)}"));
        var viewerUrl = $"/pdfjs/index.html?file={file}&page={page}&{highlightParams}";
        JS.InvokeVoidAsync("setIframeSrc", "pdfViewer", viewerUrl);
    }

    MarkupString HighlightKeywords(string text)
    {
        if (string.IsNullOrWhiteSpace(text)) return (MarkupString)text;
        var highlighted = text;
        foreach (var kvp in keywordColors)
        {
            var regex = new Regex(Regex.Escape(kvp.Key), RegexOptions.IgnoreCase);
            highlighted = regex.Replace(highlighted, m => $"<mark style=\"background-color: {kvp.Value};\">{m.Value}</mark>");
        }
        return (MarkupString)highlighted;
    }
}
