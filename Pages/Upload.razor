@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using SmartDocumentReview.Services
@using SmartDocumentReview.Models
@using SmartDocumentReview.Data
@using System.IO
@inject AuthService AuthService
@inject PdfKeywordTagger Tagger
@inject TagDbContext Db
@inject ResultStateService ResultStateService
@inject NavigationManager Navigation

<h3 class="mb-4 text-center">Smart Document Review</h3>

<div class="card shadow-sm mx-auto" style="max-width:600px;">
    <div class="card-body">
        <p class="fw-semibold">Welcome, @AuthService.CurrentUser!</p>

        <EditForm Model="this" OnValidSubmit="HandleValidSubmit">
            <InputFile class="form-control" OnChange="HandleFileSelected" accept=".pdf" />
            <div class="mt-3">
                <label class="form-label">Enter up to 5 keywords (one per line):</label>
                <InputTextArea class="form-control" @bind-Value="RawKeywordInput" Rows="6" />
            </div>
            <button type="submit" class="btn btn-primary mt-3" disabled="@IsProcessing">Process</button>
        </EditForm>

        @if (ErrorMessage != null)
        {
            <div class="alert alert-danger mt-3">@ErrorMessage</div>
        }

        @if (IsProcessing)
        {
            <p class="mt-3">Processing... @ElapsedTime</p>
        }
    </div>
</div>

@code {
    private IBrowserFile? uploadedFile;
    public string RawKeywordInput { get; set; } = string.Empty;
    public bool IsProcessing { get; set; } = false;
    public string? ErrorMessage { get; set; }
    public string ElapsedTime { get; set; } = "00:00";

    public List<TagMatch> MatchedKeywords { get; set; } = new();

    private readonly System.Diagnostics.Stopwatch _stopwatch = new();
    private System.Timers.Timer? _timer;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        ErrorMessage = null;
        MatchedKeywords.Clear();

        if (uploadedFile == null)
        {
            ErrorMessage = "Please upload a PDF file.";
            return;
        }

        var keywords = RawKeywordInput
            .Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries)
            .Select(k => k.Trim())
            .Where(k => !string.IsNullOrWhiteSpace(k))
            .Distinct()
            .Take(5)
            .ToList();

        if (!keywords.Any())
        {
            ErrorMessage = "Enter at least one keyword.";
            return;
        }

        IsProcessing = true;
        _stopwatch.Restart();
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += (s, e) =>
        {
            ElapsedTime = _stopwatch.Elapsed.ToString(@"mm\:ss");
            InvokeAsync(StateHasChanged);
        };
        _timer.Start();

        try
        {
            using var readStream = uploadedFile.OpenReadStream(20 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await readStream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            MatchedKeywords = Tagger.ProcessPdf(memoryStream, keywords, AuthService.CurrentUser);

            // Save uploaded file for PDF viewer
            memoryStream.Position = 0;
            var uploadsDir = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads");
            Directory.CreateDirectory(uploadsDir);
            var savedFilePath = Path.Combine(uploadsDir, "latest.pdf");
            await using (var fs = File.Create(savedFilePath))
            {
                await memoryStream.CopyToAsync(fs);
            }

            var document = new Document
            {
                FileName = uploadedFile.Name,
                FilePath = "/uploads/latest.pdf",
                CreatedBy = AuthService.CurrentUser,
                CreatedAt = DateTime.UtcNow
            };
            Db.Documents.Add(document);
            await Db.SaveChangesAsync();

            foreach (var match in MatchedKeywords)
            {
                match.DocumentId = document.Id;
            }

            Db.TagMatches.AddRange(MatchedKeywords);
            await Db.SaveChangesAsync();

            ResultStateService.Matches = MatchedKeywords;
            Navigation.NavigateTo("/results");
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            ErrorMessage = "Error processing PDF: " + message;
        }
        finally
        {
            IsProcessing = false;
            _timer?.Stop();
        }
    }
}