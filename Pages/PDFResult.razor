@page "/results"
@inject NavigationManager Navigation
@inject SmartDocumentReview.Services.ResultStateService ResultStateService
@inject IJSRuntime JS
@using System.Linq
@using System.Text.RegularExpressions

<h3>Matched Results</h3>

<div style="display: flex; height: 90vh;">
    <!-- Left: Match Results -->
    <div style="width: 40%; overflow-y: auto; padding: 1rem;">
        @foreach (var match in ResultStateService.Matches)
        {
            <div style="margin-bottom: 1.5rem;">
                <h4 @onclick="() => LoadPdf(match.PageNumber)"
                    style="cursor: pointer; color: blue; text-decoration: underline;">
                    @match.SectionTitle
                </h4>
                <p>@(HighlightKeywords(match.MatchedText))</p>
            </div>
        }
    </div>

    <!-- Right: PDF Viewer -->
    <div style="width: 60%; height: 100%;">
        <iframe id="pdfViewer" width="100%" height="100%" frameborder="0"></iframe>
    </div>
</div>

@code {
    private readonly string[] HighlightPalette = new[] { "#ffff00", "#ffb6c1", "#90ee90", "#add8e6", "#ffa07a" };
    private Dictionary<string, string> keywordColors = new();

    protected override void OnInitialized()
    {
        var keywords = ResultStateService.Matches.Select(m => m.Keyword).Distinct().ToList();
        keywordColors = keywords.Select((k, i) => new { k, i }).ToDictionary(x => x.k, x => HighlightPalette[x.i % HighlightPalette.Length]);

        // Load first match by default
        if (ResultStateService.Matches.Count > 0)
        {
            var first = ResultStateService.Matches[0];
            LoadPdf(first.PageNumber);
        }
    }

    void LoadPdf(int page)
    {
        var file = "/uploads/latest.pdf";
        var highlightParams = string.Join("&", keywordColors.Select(kvp => $"highlight={Uri.EscapeDataString(kvp.Key)}&color={Uri.EscapeDataString(kvp.Value)}"));
        var viewerUrl = $"/pdfjs/index.html?file={file}&page={page}&{highlightParams}";
        JS.InvokeVoidAsync("setIframeSrc", "pdfViewer", viewerUrl);
    }

    MarkupString HighlightKeywords(string text)
    {
        if (string.IsNullOrWhiteSpace(text)) return (MarkupString)text;
        var highlighted = text;
        foreach (var kvp in keywordColors)
        {
            var escaped = Regex.Escape(kvp.Key);
            var pattern = Regex.IsMatch(kvp.Key, @"\W") ? escaped : $"\\b{escaped}\\b";
            var regex = new Regex(pattern, RegexOptions.IgnoreCase);
            highlighted = regex.Replace(highlighted, m => $"<mark style=\"background-color: {kvp.Value};\">{m.Value}</mark>");
        }
        return (MarkupString)highlighted;
    }
}
