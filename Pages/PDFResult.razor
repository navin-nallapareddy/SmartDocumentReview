@page "/results"
@inject NavigationManager Navigation
@inject SmartDocumentReview.Services.ResultStateService ResultStateService
@inject IJSRuntime JS

<h3>Matched Results</h3>

<div style="display: flex; height: 90vh;">
    <!-- Left: Match Results -->
    <div style="width: 40%; overflow-y: auto; padding: 1rem;">
        @foreach (var match in ResultStateService.Matches)
        {
            <div style="margin-bottom: 1.5rem;">
                <h4 @onclick="() => LoadPdf(match.PageNumber, match.Keyword)" 
                    style="cursor: pointer; color: blue; text-decoration: underline;">
                    @match.SectionTitle
                </h4>
                <p>@(HighlightKeyword(match.MatchedText, match.Keyword))</p>
            </div>
        }
    </div>

    <!-- Right: PDF Viewer -->
    <div style="width: 60%; height: 100%;">
        <iframe id="pdfViewer" width="100%" height="100%" frameborder="0"></iframe>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        // Load first match by default
        if (ResultStateService.Matches.Count > 0)
        {
            var first = ResultStateService.Matches[0];
            LoadPdf(first.PageNumber, first.Keyword);
        }
    }

    void LoadPdf(int page, string keyword)
    {
        var file = "/uploads/latest.pdf";
        var viewerUrl = $"/pdfjs/index.html?file={file}&page={page}&highlight={keyword}";
        JS.InvokeVoidAsync("setIframeSrc", "pdfViewer", viewerUrl);
    }

    MarkupString HighlightKeyword(string text, string keyword)
    {
        if (string.IsNullOrWhiteSpace(keyword)) return (MarkupString)text;
        var highlighted = text.Replace(keyword, $"<mark>{keyword}</mark>", StringComparison.OrdinalIgnoreCase);
        return (MarkupString)highlighted;
    }
}